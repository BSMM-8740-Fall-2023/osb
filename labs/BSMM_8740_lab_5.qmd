---
title: "Lab 5 - The Models package"
editor: visual
reference-location: margin
---

## Introduction

In today's lab, you'll practice building `workflowsets` with `recipes`, `parsnip` models, `rsample` cross validations, model tuning and model comparison.

### Learning goals

By the end of the lab you will...

-   Be able to build workflows to evaluate different models and featuresets.

## Getting started

-   Log in to **your** github account and then go to the [GitHub organization](https://github.com/bsmm-8740-fall-2023) for the course and find the **BSMM-lab-5-\[your github username\]** repository to complete the lab.

    Create an R project using your **BSMM-lab-5-\[your github username\]** repository (remember to create a PAT, etc., as in lab-1) and add your answers by editing the `BSMM-lab-5.qmd` file in your repository.

-   When you are done, be sure to save your document, stage, commit and push your work.

::: callout-important
To access Github from the lab, you will need to make sure you are logged in as follows:

-   username: **.\\daladmin**
-   password: **Business507!**

Remember to (create a PAT and set your git credentials)

-   create your PAT using `usethis::create_github_token()` ,
-   store your PAT with `gitcreds::gitcreds_set()` ,
-   set your username and email with
    -   `usethis::use_git_config( user.name = ___, user.email = ___)`
:::

## Packages

```{r}
#| message: false
library(magrittr)   # the pipe
library(tidyverse)  # for data wrangling + visualization
library(tidymodels) # for modeling
library(ggplot2)    # for plotting
# set the efault theme for plotting
theme_set(theme_bw(base_size = 18) + theme(legend.position = "top"))
```

## The Data

Today we will be using the Ames Housing Data.

This is a data set from [De Cock](http://jse.amstat.org/v19n3/decock.pdf) (2011) has 82 fields were recorded for 2,930 properties in Ames Iowa in the US. The version in the `modeldata` package is copied from the `AmesHousing` package but does not include a few quality columns that appear to be outcomes rather than predictors.

```{r}
#| eval: false
dat <- modeldata::ames
```

The data dictionary can be found on the internet:

```{r}
#| eval: false
cat(readr::read_file("http://jse.amstat.org/v19n3/decock/DataDocumentation.txt"))
```

## Exercise 1: EDA

Write and execute the code to perform summary EDA on the Ames Housing data using the package `skimr`.

## Exercise 2: Train / Test Splits

Write and execute code to create training and test datasets. Have the training dataset represent 75% of the total data.

```{r}
#| eval: false
set.seed(8740)
data_split <- rsample::__

ames_train <- rsample::__
ames_test  <- rsample::__
```

## Exercise 3: Data Preprocessing

Create a recipe based on the formula **Sale_Price \~ Longitude + Latitude + Lot_Area + Neighborhood + Year_Sold** with the following steps :

-   transform the outcome variable `Sale_Price` to `log(Sale_Price)` (natural log)
-   center and scale all numeric predictors
-   transform the categorical variable `Neighborhood` to pool infrequent values (see `recipes::step_other`)
-   create dummy variables for all nominal predictors

Finally prep the recipe.

Make sure you consider the order of the operations (hint: `step_dummy` turns factors into multiply integer (numeric) predictor, so consider when to scale numeric predictors relative to creating dummy predictors.

You can use broom::tidy() on the recipe to examine whether the prepped data is correct.

```{r}
#| eval: false
norm_recipe <- 
  recipes::recipe( ___ ) %>% 
      .
      .
      .
  recipes::prep( ___ )
```

## Exercise 4 Modeling

Create three regression models using the `parsnip::` package and assign each model to its own variable

-   a base regression model using `lm`
-   a regression model using `glmnet`; set the model parameters `penalty` and `mixture` for tuning
-   a tree model using the `ranger` engine; set the model parameters `min_n` and `trees` for tuning

Evaluate (print) each model variable to show the type of model, the method of fitting and the tuning arguments, if any.

```{r}
#| eval: false
lm_mod_base <- 
  parsnip::linear_reg( ___ ) %>% ___

lm_mod_glmnet <- 
  parsnip::linear_reg( ___ ) %>% ___

lm_mod_rforest <- 
  parsnip::rand_forest( ___ ) %>% ___
```

## Exercise 5

Use `parsnip::translate()` on each model to see the the model template for each method of fitting.

## Exercise 6 Bootstrap

Create bootstrap samples for the training dataset. You can leave the parameters set to their defaults

```{r}
#| eval: false
set.seed(8740)
train_resamples <- ___ %>% rsample::bootstraps()
```

::: render-commit-push
This is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.
:::

## Exercise 7

Create workflows with `workflowsets::workflow_set` using your recipe and models. Show the resulting datastructure, noting the number of columns, and then use `tidyr::` to unnest the *info* column and show its contents.

```{r}
#| eval: false
all_workflows <- 
  workflowsets::workflow_set(
    preproc = list(base = norm_recipe),
    models = list(base = lm_mod_base, glmnet = lm_mod_glmnet, forest = lm_mod_rforest)
  )
```

## Exercise 8

Use `workflowsets::workflow_map` to map the default function (`tune::tune_grid()` - look at the help for `workflowsets::workflow_map` ) across the workflows in the workflowset you just created and update the variable `all_workflows` with the result.

```{r}
#| eval: false
all_workflows <- all_workflows %>% 
  workflowsets::workflow_map(
    verbose = TRUE                # enable logging
    , resamples = train_resamples # a parameter passed to tune::tune_grid()
    , grid = 5                    # a parameter passed to tune::tune_grid()
  )
```

The updated variable `all_workflows` contains a nested column named **result**, and each cell of the column **result** is a tibble containing a nested column named **.metrics**. Write code to

1.  un-nest the metrics in the column .metrics
2.  filter out the rows for the metric rsq
3.  group by wflow_id, order the .estimate column from highest to lowest, and pick out the first row of each group.

```{r}
#| eval: false
all_workflows %>% 
  dplyr::select(wflow_id,__) %>% 
  tidyr::unnest(__) %>% 
  dplyr::select(wflow_id,__) %>% 
  tidyr::unnest(__) %>% 
  dplyr::filter(.metric == '___') %>% 
  dplyr::group_by(wflow_id) %>% 
  dplyr::arrange(desc(__) ) %>% 
  dplyr::slice(1)
```

## Exercise 9

Run the code below and compare to your results from exercise 8.

```{r}
#| eval: false
workflowsets::rank_results(all_workflows, rank_metric = "rsq", select_best = TRUE)
```

## Exercise 10

Select the best model per the **rsq** metric using its id.

```{r}
#| eval: false
best_model_workflow <- 
  all_workflows %>% 
  workflowsets::extract_workflow("__")
```

Finalize the workflow by setting the parameters for the best model

```{r}
#| eval: false
best_model_workflow <- 
  best_model_workflow %>% 
  tune::finalize_workflow(
    tibble::tibble(__ = __, __ = __) # enter the name and value of the best-fit parameters
  ) 
```

Now compare the fits

```{r}
#| eval: false
training_fit <- best_model_workflow %>% 
  fit(data = ames_train)

testing_fit <- best_model_workflow %>% 
  fit(data = ames_test)
```

What is the ratio of the OOB prediction errors (MSE): test/train?

## Submission

::: callout-warning
Before you wrap up the assignment, make sure all documents are saved, staged, committed, and pushed to your repository on the course github site.

Remember -- you do **not** have to turn in an \*.html file. I will be pulling your work directly from your repository on the course website.
:::

## Grading

Total points available: 30 points.

| Component | Points |
|-----------|--------|
| Ex 1 - 10 | 30     |
