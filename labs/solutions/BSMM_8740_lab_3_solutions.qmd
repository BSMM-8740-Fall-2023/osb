---
title: "Lab 3 - The Recipes package"
subtitle: "SOLUTIONS"
editor: visual
format: html
self-contained: true
reference-location: margin
---

## Packages

We will use the following package in today's lab.

```{r}
#| message: false
library(magrittr)   # the pipe
library(tidyverse)  # for data wrangling + visualization
library(tidymodels) # for modeling
library(gt)         # for pretty tables

boston_cocktails <- readr::read_csv('../data/boston_cocktails.csv', show_col_types = FALSE)
```

## Data: The Boston Cocktail Recipes

The Boston Cocktail Recipes dataset appeared in a TidyTuesday posting. TidyTuesday is a weekly data project in R.

The dataset is derived from the [Mr. Boston Bartender's Guide](http://swizzle.ru/uploads/article_file/17/mr_boston.pdf), together with a dataset that was web-scraped as part of a hackathon.

This dataset contains the following information for each cocktail:

| variable          | class     | description                      |
|-------------------|-----------|----------------------------------|
| name              | character | Name of cocktail                 |
| category          | character | Category of cocktail             |
| row_id            | integer   | Drink identifier                 |
| ingredient_number | integer   | Ingredient number                |
| ingredient        | character | Ingredient                       |
| measure           | character | Measurement/volume of ingredient |
| measure_number    | real      | measure as a number              |

## Exercises

### Exercise 1

First use `skimr::skim` and `DataExplorer::introduce` to assess the quality of the data set.

Next prepare a `summary`. What is the median measure number across cocktail recipes?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
#| layout-nrow: 3
boston_cocktails %>% skimr::skim()
```

```{r}
boston_cocktails %>% DataExplorer::introduce()
```

```{r}
boston_cocktails %>% summary()
```

The median measure is 1.0. Note that the dimensions are identified as ounces (oz) in the `measure` column.
:::

### Exercise 2

From the boston_cocktails dataset select the *name*, *category*, *ingredient*, and *measure_number* columns and then pivot the table to create a column for each ingredient. Fill any missing values with the number zero.

Since the names of the new columns may contain spaces, clean them using the `janitor::clean_names()`. Finally drop any rows with NA values and save this new dataset in a variable.

How much gin is in the cocktail called **Leap Frog Highball**?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
cocktails_df <- boston_cocktails %>%
  # select the columns (by de-selecting the ones we don't want)
  dplyr::select(-ingredient_number, -row_id, -measure) %>%
  # pivot wider (make more columns); use zeros in place of NA values
  tidyr::pivot_wider(
    names_from = ingredient
    , values_from = measure_number
    , values_fill = 0
  ) %>%
  janitor::clean_names() %>%
  tidyr::drop_na()
# show the table in the document
cocktails_df
```

```{r}
cocktails_df %>% 
  # filter for the desired cocktail
  dplyr::filter(name == 'Leap Frog Highball') %>% 
  dplyr::pull(gin)
```

Two ounces (oz) of gin are in the *Leap Frog Highball.*
:::

### Exercise 3

Prepare a recipes::recipe object without a target but give name and category as 'id' roles. Add steps to normalize the predictors and perform PCA. Finally `prep` the data and save it in a variable.

How many predictor variables are prepped by the recipe?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
# create a recipe: y~. with an outcome/target, but here we just use ~.
pca_rec <- recipes::recipe(~., data = cocktails_df) 
pca_rec %>% summary()
```

```{r}
pca_rec <- pca_rec %>% 
  # change the roles of name and category to 'id' from 'predictor'
  recipes::update_role(name, category, new_role = "id") %>%
  # normalize the remaining predictors
  recipes::step_normalize(all_predictors()) %>%
  # convert the predictors to principle components
  recipes::step_pca(all_predictors())

# note there are 40 predictors, but that nothing has been calculated yet
pca_rec %>% summary()
```

```{r}
# calculate prepare the data per the steps in the recipe
pca_prep <- recipes::prep(pca_rec)
pca_prep %>% summary
```

-   There are 40 predictors and 2 id variables before the data is prepped.
-   Once prepped, the PCA returns just 5 components by default, so we have (post-prep) 5 predictors and 2 id variables.
:::

### Exercise 4

Apply the `recipes::tidy` verb to the prepped recipe in the last exercise. The result is a table identifying the information generated and stored by each step in the recipe from the input data.

To see the values calculated for normalization, apply the `recipes::tidy` verb as before, but with second argument = 1.

What ingredient is the most used, on average?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
# tidy returns a tibble with the calculations performed by prep
pca_prep %>% recipes::tidy()
```

```{r}
# if we select the first (normalization) step we get the values calculated:
# - the mean and standard deviation for each variable
foo <- pca_prep %>% recipes::tidy(1)
foo
```

```{r}
# we can just filter to find the largest mean value
foo %>% dplyr::filter(statistic == 'mean') %>% 
  # since we have just the mean values, filter out the row with the max value 
  dplyr::filter(value == max(value))
```

On average, it is gin that is the largest component of the cocktails, with just over 1/4 oz per cocktail.
:::

### Exercise 5

Now look at the result of the PCA, applying the `recipes::tidy` verb as before, but with second argument = 2. Save the result in a variable and filter for the components PC1 to PC5. Mutate the resulting `component` column so that the values are factors, ordering them in the order they appear using the `forcats::fct_inorder` verb.

Plot this data using `ggplot2` and the code below

```{r}
#| echo: true
#| eval: false
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL) +
theme(axis.text=element_text(size=7),
      axis.title=element_text(size=14,face="bold"))
```

How would you describe the drinks represented by PC1?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
# this is showing the weights of each ingredient, for each component.
# - i.e. PC1 (along with PC2 - PC5) is a weighted sum of ingredients
bar <- pca_prep %>% recipes::tidy(2)
bar
```

```{r}
# plot to show the ingredient weights
bar %>%
  # since there are only 5 components, this is redundant
  dplyr::filter(component %in% paste0("PC", 1:5)) %>%
  # change component from a character to a factor, and give them an order
  dplyr::mutate(component = forcats::fct_inorder(component)) %>%
  # plot
  ggplot(aes(value, terms, fill = terms)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~component, nrow = 1) +
  labs(y = NULL) +
  theme(axis.text=element_text(size=7),
        axis.title=element_text(size=14,face="bold"))
```
:::

### Exercise 6

As in the last exercise, use the variable with the tidied PCA data and use only PCA components PC1 to PC4. Take/slice the top 8 ingedients by component, ordered by their absolute value using the verb `dplyr::slice_max`. Next, generate a grouped table using gt::gt, colouring the cell backgrounds (i.e. fill) with green for values $\ge0$ and red for values $<0$.

What is the characteristic alcoholic beverage of each of the first 4 principle components.

### Exercise 7

For this exercise, bake the prepped PCA recipe using `recipes::bake` on the original data and plot each cocktail by its PC1, PC2 component, using

```{r}
#| echo: true
#| eval: false
ggplot(aes(PC1, PC2, label = name)) +
  geom_point(aes(color = category), alpha = 0.7, size = 2) +
  geom_text(check_overlap = TRUE, hjust = "inward") + 
  labs(color = NULL)
```

Can you create an interpretation of the PCA analysis?

::: render-commit-push
This is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.
:::

## Submission

::: callout-warning
Before you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.

Remember -- you must turn in a HTML file to the Brightspace page before the submission deadline for full credit.
:::

To submit your assignment:

-   Log in to [Brightspace](https://brightspace.uwindsor.ca/d2l/home/144921) and select course [BSMM8740-2-R-2023F\|Data Analytic Meth.](https://brightspace.uwindsor.ca/d2l/home/144921 "BSMM8740-2-R-2023F|Data Analytic Meth. & Algorith")
-   Click on the Lab 3 assignment, and submit it.

## Grading

Total points available: 30 points.

| Component | Points |
|-----------|--------|
| Ex 1 - 7  | 30     |
